{"version":3,"sources":["components/common/Loading.tsx","components/common/Spinner.tsx","components/todo/TodoService.tsx","components/todo/template/TodoTemplate.tsx","components/todo/template/head/TodoHead.tsx","utils/constants.ts","components/todo/template/list/item/TodoItem.tsx","components/todo/template/list/TodoList.tsx","components/common/Modal.ts","components/todo/template/create/TodoDatePicker.tsx","components/todo/template/create/TodoCreate.tsx","components/todo/template/footer/TodoFooter.tsx","components/todo/TodoContainer.tsx","App.tsx","index.js"],"names":["Loading","props","LoadingOutlined","style","fontSize","size","spin","StyledSpinnerWrapper","styled","Row","styleProps","Spinner","tip","delay","mask","className","justify","align","indicator","defaultProps","initialTodos","TodoTemplateBlock","div","TodoTemplate","children","React","memo","TodoHeadBlock","DateText","DayText","TodoHead","useState","dayString","setDayString","dateString","setDateString","useEffect","currentDate","Date","locale","toLocaleDateString","year","month","day","weekday","loadCurrentDate","DATE_FORMAT","STATE","Remove","TodoItemBlock","CheckCircle","state","css","Text","TodoItem","toggleTodo","removeTodo","todo","text","deadLine","onClick","id","ClockCircleOutlined","CheckOutlined","renderStateIcon","DeleteOutlined","TodoListBlock","TodoList","todos","map","warningModal","title","content","Modal","warning","TodoDatePicker","handleDate","onChange","date","CircleButton","button","InsertFormPositioner","InsertForm","form","Input","input","TodoCreate","nextId","createTodo","incrementNextId","open","setOpen","value","setValue","setDeadLine","onSubmit","e","preventDefault","curDate","moment","format","isBefore","autoFocus","placeholder","target","PlusCircleOutlined","TodoFooterBlock","LeftText","Todofooter","undoneTasks","filter","length","TodoContainer","todoState","setTodoState","nextIdState","setNextIdState","loadData","saveData","console","log","data","localStorage","getItem","undefined","JSON","parse","maxId","Math","max","i","setItem","stringify","prev","stateHadleTodo","matchIndex","findIndex","item","prevState","concat","useTodo","TodoFooter","App","GlobalStyle","createGlobalStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3406221f.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { SpinSize } from 'antd/lib/spin';\n\ninterface ILoadingProps {\n\tsize?: SpinSize;\n\tstyle?: React.CSSProperties;\n}\n\nexport default function Loading(props: ILoadingProps): ReactElement {\n\treturn <LoadingOutlined style={{ fontSize: props.size === 'large' ? 48 : 24, ...props.style }} spin />;\n}\n","import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\nimport { Spin, Row, Col } from 'antd';\nimport { SpinSize } from 'antd/lib/spin';\n\nimport Loading from './Loading';\n\ninterface ISpinnerProps {\n\ttip?: string;\n\tsize?: SpinSize;\n\tdelay?: number;\n\tstyle?: React.CSSProperties;\n\tmask?: boolean;\n}\n\ninterface IWrapperProp {\n\treadonly ['data-mask']: boolean;\n}\n\nconst StyledSpinnerWrapper = styled(Row)<IWrapperProp>`\n\tbackground-color: ${styleProps => (styleProps['data-mask'] ? 'rgba(0, 0, 0, 0.1)' : 'transparent')};\n`;\n\nfunction Spinner(props: ISpinnerProps): ReactElement {\n\tconst { tip, size, delay, style, mask = false } = props;\n\n\treturn (\n\t\t<StyledSpinnerWrapper className=\"spinner-wrap\" justify=\"center\" align=\"middle\" style={style} data-mask={mask}>\n\t\t\t<Col>\n\t\t\t\t<Spin indicator={<Loading size={size} />} delay={delay} tip={tip} size={size} />\n\t\t\t</Col>\n\t\t</StyledSpinnerWrapper>\n\t);\n}\n\nSpinner.defaultProps = {\n\ttip: '로딩중입니다.',\n\tsize: 'large',\n\tdelay: 0,\n\tstyle: {},\n\tmask: false,\n};\n\nexport default Spinner;\n","import { useState, useEffect } from \"react\";\n\n// eslint-disable react-hooks/exhaustive-deps\nexport type Itodo = {\n  id: number;\n  text: string;\n  state: number;\n  deadLine: string| null;\n};\n\nlet initialTodos: Itodo[] = [];\n\nexport const useTodo = () => {\n  const [todoState, setTodoState] = useState(initialTodos);\n  const [nextIdState, setNextIdState] = useState(0);\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    saveData();\n    console.log(todoState);\n  }, [todoState]);\n\n  const incrementNextId = () => {\n    setNextIdState((prev) => prev + 1);\n  };\n\n  // const toggleTodo = (id: number) => {\n  //   //@TODO\n  //   setTodoState((prev) => {\n  //     const matchIndex = prev.findIndex((item) => item.id === id);\n  //     prev[matchIndex].done = !prev[matchIndex].done;\n  //     return [...prev];\n  //   });\n  // };\n\n  const stateHadleTodo= (id: number) => {\n    setTodoState((prev) => {\n      const matchIndex = prev.findIndex((item) => item.id === id);\n      prev[matchIndex].state = (prev[matchIndex].state + 1) % 3;\n      return [...prev];\n    });\n  };\n\n  const removeTodo = (id: number) => {\n    setTodoState((prevState) => prevState.filter((todo: Itodo) => todo.id !== id));\n  };\n\n  const createTodo = (todo: Itodo) => {\n    setTodoState((prevState) =>\n      prevState.concat({\n        ...todo,\n        id: nextIdState,\n      })\n    );\n  };\n\n  const loadData = () => {\n    let data = localStorage.getItem(\"todos\");\n    if (data === undefined) data = \"\";\n    initialTodos = JSON.parse(data || \"\");\n    if (initialTodos && initialTodos.length >= 1) {\n      const maxId = Math.max(...initialTodos.map((i) => i.id));\n      setNextIdState(maxId + 1);\n    }\n    setTodoState(initialTodos);\n  };\n\n  const saveData = () => {\n    localStorage.setItem(\"todos\", JSON.stringify(todoState));\n  };\n\n  return {\n    todoState,\n    nextIdState,\n    incrementNextId,\n    stateHadleTodo,\n    removeTodo,\n    createTodo,\n  };\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst TodoTemplateBlock = styled.div`\n  width: 70%;\n  height: 800px;\n\n  min-width: 360px;\n  max-width: 700px;\n\n  position: relative;\n  background: white;\n  border-radius: 30px;\n  box-shadow: 0 0 50px 0 rgba(0, 0, 0, 0.1);\n\n  margin: 0 auto;\n\n  margin-top: 96px;\n  margin-bottom: 32px;\n  display: flex;\n  flex-direction: column;\n`;\n\nfunction TodoTemplate(props: any) {\n  return <TodoTemplateBlock>{props.children}</TodoTemplateBlock>;\n}\n\nexport default React.memo(TodoTemplate);\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst TodoHeadBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 52px;\n  padding-bottom: 24px;\n  border-bottom: 3px solid #33bb77;\n`;\n\nconst DateText = styled.div`\n  font-size: 26px;\n  color: #119955;\n  padding-left: 10px;\n`;\n\nconst DayText = styled.div`\n  font-size: 22px;\n  color: #119955;\n  padding-top: 5px;\n`;\n\nconst TodoHead = () => {\n  const [dayString, setDayString] = useState(\"\");\n  const [dateString, setDateString] = useState(\"\");\n\n  const loadCurrentDate = () => {\n    const currentDate = new Date();\n    const locale = \"en-US\";\n    setDateString(\n      currentDate.toLocaleDateString(locale, {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n      })\n    );\n    setDayString(\n      currentDate.toLocaleDateString(locale, {\n        weekday: \"long\",\n      })\n    );\n  };\n\n  useEffect(() => {\n    loadCurrentDate();\n  }, []);\n\n  return (\n    <TodoHeadBlock>\n      <DayText>{dayString}</DayText>\n      <DateText>{dateString}</DateText>\n    </TodoHeadBlock>\n  );\n};\n\nexport default React.memo(TodoHead);\n","export const DATE_FORMAT = \"YYYY-MM-DD\";\n\n\nexport const STATE = {\n  TODO: 0,\n  INPROGRESS: 1,\n  DONE: 2,\n};\n","import React from \"react\";\nimport { CheckOutlined, DeleteOutlined, ClockCircleOutlined } from \"@ant-design/icons\";\nimport { Itodo } from \"components/todo/TodoService\";\nimport styled, { css } from \"styled-components\";\nimport { STATE } from \"utils/constants\";\n\nconst Remove = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #119955;\n  font-size: 16px;\n`;\n\nconst TodoItemBlock = styled.div`\n  display: flex;\n  align-items: center;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  &:hover {\n    ${Remove} {\n      display: initial;\n    }\n  }\n`;\n\nconst CheckCircle = styled.div<{ state: number }>`\n  width: 20px;\n  height: 20px;\n  border-radius: 16px;\n  border: 1px solid #33bb77;\n  font-size: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 20px;\n  cursor: pointer;\n\n  ${(props) => {\n    switch (props.state) {\n      case STATE.TODO:\n        return;\n      case STATE.INPROGRESS:\n        return css`\n          border: 1px solid #f48024;\n          color: #f48024;\n        `;\n      case STATE.DONE:\n        return css`\n          border: 1px solid #dddddd;\n          color: #dddddd;\n        `;\n    }\n  }}\n`;\n\nconst Text = styled.div<{ state: number }>`\n  flex: 1;\n  font-size: 16px;\n  color: #119955;\n  ${(props) => {\n    switch (props.state) {\n      case STATE.INPROGRESS:\n        return css`\n          color: #f48024;\n          text-decoration: underline;\n        `;\n      case STATE.DONE:\n        return css`\n          color: #ced4da;\n          text-decoration: line-through;\n        `;\n    }\n  }}\n`;\n\ninterface TodoItemProps {\n  toggleTodo: (id: number) => void;\n  removeTodo: (id: number) => void;\n  todo: Itodo;\n}\n\nconst TodoItem = ({ toggleTodo, removeTodo, todo }: TodoItemProps) => {\n  const { text, deadLine, state } = todo;\n\n  const handleState = () => {\n    toggleTodo(todo.id);\n  };\n\n  const handleRemove = () => {\n    removeTodo(todo.id);\n  };\n\n  const renderStateIcon = (id: number) => {\n    switch (id) {\n      case STATE.TODO:\n        return;\n      case STATE.INPROGRESS:\n        return <ClockCircleOutlined />;\n      case STATE.DONE:\n        return <CheckOutlined />;\n    }\n  };\n\n  return (\n    <TodoItemBlock>\n      <CheckCircle state={state} onClick={handleState}>\n        {renderStateIcon(state)}\n        {/* {done && <CheckOutlined />} */}\n      </CheckCircle>\n      <Text state={state}>{text}</Text>\n      {deadLine && <Text state={state}>{deadLine}</Text>}\n      <Remove onClick={handleRemove}>\n        <DeleteOutlined />\n      </Remove>\n    </TodoItemBlock>\n  );\n};\n\nexport default React.memo(TodoItem);\n","import { Itodo } from \"components/todo/TodoService\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport TodoItem from \"./item/TodoItem\";\n\nconst TodoListBlock = styled.div`\n  flex: 1;\n  padding: 20px 32px;\n  padding-bottom: 48px;\n  overflow-y: auto;\n`;\n\ninterface TodoListProps {\n  todos: Itodo[];\n  toggleTodo: (id: number) => void;\n  removeTodo: (id: number) => void;\n}\n\nconst TodoList = ({ toggleTodo, removeTodo, todos }: TodoListProps) => {\n  return (\n    <TodoListBlock>\n      {todos &&\n        todos.map((todo) => (\n          <TodoItem\n            toggleTodo={toggleTodo}\n            removeTodo={removeTodo}\n            key={todo.id}\n            todo={todo}\n          />\n        ))}\n    </TodoListBlock>\n  );\n};\n\nexport default React.memo(TodoList);\n","import { Modal } from \"antd\";\n\nexport const warningModal = (title: string, content: string) => {\n  Modal.warning({\n    title: title,\n    content: content,\n  });\n};\n","import { DatePicker } from \"antd\";\nimport { Moment } from \"moment\";\nimport { ReactElement } from 'react';\n\ninterface TodoDatePickerProps {\n  handleDate: (item: Moment | null) => void;\n}\n\nconst TodoDatePicker = ({ handleDate }: TodoDatePickerProps): ReactElement => {\n  const onChange = (date: Moment | null) => {\n    handleDate(date);\n  };\n  return (\n    <div>\n      <DatePicker onChange={onChange} />\n    </div>\n  );\n};\n\nexport default TodoDatePicker;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport moment, { Moment } from \"moment\";\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\nimport { DATE_FORMAT, STATE } from \"utils/constants\";\nimport { warningModal } from \"components/common/Modal\";\nimport { Itodo } from \"components/todo/TodoService\";\nimport TodoDatePicker from \"./TodoDatePicker\";\n\nconst CircleButton = styled.button<{ open: boolean }>`\n  background: #33bb77;\n  width: 50px;\n  height: 50px;\n  align-items: center;\n  justify-content: center;\n  font-size: 60px;\n  left: 50%;\n  transform: translate(50%, 0%);\n  color: white;\n  border-radius: 50%;\n  border: none;\n  outline: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst InsertFormPositioner = styled.div`\n  width: 100%;\n  border-bottom: 1px solid #eeeeee;\n`;\n\nconst InsertForm = styled.form`\n  display: flex;\n  background: #eeeeee;\n  padding-left: 40px;\n  padding-top: 36px;\n  padding-right: 60px;\n  padding-bottom: 36px;\n`;\n\nconst Input = styled.input`\n  padding: 12px;\n  border: 1px solid #dddddd;\n  width: 100%;\n  outline: none;\n  font-size: 21px;\n  box-sizing: border-box;\n  color: #119955;\n  &::placeholder {\n    color: #dddddd;\n    font-size: 16px;\n  }\n`;\n\ninterface TodoCreateProps {\n  nextId: number;\n  createTodo: (todo: Itodo) => void;\n  incrementNextId: () => void;\n}\n\nconst TodoCreate = ({ nextId, createTodo, incrementNextId }: TodoCreateProps) => {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const [deadLine, setDeadLine] = useState<string | null>(null);\n\n  const handleToggle = () => setOpen(!open);\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => setValue(e.target.value);\n  const handleDate = (date: Moment | null) => {\n    const dateString = date?.format(DATE_FORMAT);\n    if (dateString) setDeadLine(dateString);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault(); // 새로고침 방지\n    if (!value) {\n      warningModal(\"WARN\", \"할일을 입력해주세요\");\n      return;\n    }\n    const curDate = moment().format(DATE_FORMAT);\n\n    if (moment(deadLine).isBefore(curDate)) {\n      warningModal(\"WARN\", \"과거 날짜를 입력하셨습니다.\");\n      return;\n    }\n\n    createTodo({\n      id: nextId,\n      text: value,\n      state: STATE.TODO,\n      deadLine: deadLine,\n    });\n    incrementNextId(); // nextId 하나 증가\n\n    setValue(\"\"); // input 초기화\n    setOpen(false); // open 닫기\n  };\n\n  return (\n    <>\n      <InsertFormPositioner>\n        <InsertForm onSubmit={handleSubmit}>\n          <Input\n            autoFocus\n            placeholder=\"What's need to be done?\"\n            onChange={handleChange}\n            value={value}\n          />\n          <TodoDatePicker handleDate={handleDate} />\n          <CircleButton onClick={handleToggle} open={open}>\n            <PlusCircleOutlined />\n          </CircleButton>\n        </InsertForm>\n      </InsertFormPositioner>\n    </>\n  );\n};\n\nexport default React.memo(TodoCreate);\n","import { Itodo } from \"components/todo/TodoService\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { STATE } from 'utils/constants';\n\nconst TodoFooterBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: 24px;\n  padding-bottom: 24px;\n`;\n\nconst LeftText = styled.div`\n  color: #33bb77;\n  font-size: 18px;\n`;\n\ninterface HooksTodoHeadProps {\n  todos: Itodo[];\n}\n\nconst Todofooter = ({ todos }: HooksTodoHeadProps) => {\n  const undoneTasks = todos.filter((todo) => todo.state!==STATE.DONE);\n  return (\n    <TodoFooterBlock>\n      <LeftText className=\"tasks-left\">\n        {undoneTasks.length} items left\n      </LeftText>\n    </TodoFooterBlock>\n  );\n};\n\nexport default React.memo(Todofooter);\n","import { useTodo } from \"./TodoService\";\nimport TodoTemplate from \"./template/TodoTemplate\";\nimport TodoHead from \"./template/head/TodoHead\";\nimport TodoList from \"./template/list/TodoList\";\nimport TodoCreate from \"./template/create/TodoCreate\";\nimport TodoFooter from \"./template/footer/TodoFooter\";\n\nconst TodoContainer = () => {\n  const {\n    todoState,\n    nextIdState,\n    incrementNextId,\n    stateHadleTodo,\n    removeTodo,\n    createTodo,\n  } = useTodo();\n  \n  return (\n    <>\n      <TodoTemplate>\n        <TodoHead />\n        <TodoCreate\n          nextId={nextIdState}\n          createTodo={createTodo}\n          incrementNextId={incrementNextId}\n        />\n        <TodoList\n          toggleTodo={stateHadleTodo}\n          removeTodo={removeTodo}\n          todos={todoState}\n        />\n        <TodoFooter todos={todoState} />\n      </TodoTemplate>\n    </>\n  );\n};\n\nexport default TodoContainer;\n","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport Spinner from \"./components/common/Spinner\";\nimport TodoContainer from \"./components/todo/TodoContainer\";\n\nfunction App() {\n  //@TODO login\n  const isLogged = true;\n\n  const RenderLayout = (\n    <div>\n      <TodoContainer />\n    </div>\n  );\n\n  return isLogged ? RenderLayout : <Spinner mask />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createGlobalStyle } from \"styled-components\";\nimport App from \"./App\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #eeeeee;\n  }\n`;\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
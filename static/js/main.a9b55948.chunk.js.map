{"version":3,"sources":["components/todo/TodoService.tsx","components/todo/template/TodoTemplate.tsx","components/todo/template/head/TodoHead.tsx","components/common/Modal.tsx","utils/constants.ts","components/todo/template/list/item/TodoItem.tsx","components/todo/template/list/TodoList.tsx","components/todo/template/create/TodoDatePicker.tsx","components/todo/template/create/TodoCreate.tsx","components/todo/template/footer/TodoFooter.tsx","components/todo/TodoContainer.tsx","utils/hooks.ts","components/common/LoginForm.tsx","App.tsx","index.js"],"names":["initialTodos","TodoTemplateBlock","styled","div","TodoTemplate","props","children","React","memo","TodoHeadBlock","UserInfoText","DateText","DayText","LogoutButton","button","TodoHead","user","logout","useState","dayString","setDayString","dateString","setDateString","useEffect","currentDate","Date","locale","toLocaleDateString","year","month","day","weekday","loadCurrentDate","onClick","title","LogoutOutlined","warningModal","content","Modal","warning","DATE_FORMAT","STATE","Remove","TodoItemBlock","CheckCircle","state","css","textStyleSyncState","Text","TodoItem","toggleTodo","removeTodo","todo","text","deadLine","id","ClockCircleOutlined","CheckOutlined","renderStateIcon","date","info","DeleteOutlined","TodoListBlock","TodoList","todos","map","TodoDatePicker","handleDate","onChange","size","CircleButton","InsertFormPositioner","InsertForm","form","Input","input","TodoCreate","nextId","createTodo","incrementNextId","open","setOpen","value","setValue","setDeadLine","onSubmit","e","preventDefault","curDate","moment","format","isBefore","autoFocus","placeholder","target","PlusCircleOutlined","TodoFooterBlock","LeftText","Todofooter","undoneTasks","filter","className","length","TodoContainer","todoState","setTodoState","nextIdState","setNextIdState","loadData","saveData","a","undefined","data","localStorage","getItem","JSON","parse","maxId","Math","max","i","setItem","stringify","prev","stateHadleTodo","matchIndex","findIndex","item","prevState","concat","useTodo","TodoFooter","useInput","initialValue","useCallback","ButtonWrapper","FormWrapper","Form","LoginForm","configUser","onChangeId","password","onChangePassword","onSubmitForm","onFinish","htmlFor","name","required","type","htmlType","loading","App","setUser","isLogged","setIsLogged","GlobalStyle","createGlobalStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a9b55948.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\n// eslint-disable react-hooks/exhaustive-deps\nexport type Itodo = {\n  id: number;\n  text: string;\n  state: number;\n  deadLine: string | null;\n};\n\nlet initialTodos: Itodo[] = [];\n\nexport const useTodo = (user: string) => {\n  const [todoState, setTodoState] = useState(initialTodos);\n  const [nextIdState, setNextIdState] = useState(0);\n\n  useEffect(() => {\n    loadData();\n  }, [user]);\n\n  useEffect(() => {\n    saveData();\n  }, [todoState]);\n\n  const incrementNextId = () => {\n    setNextIdState((prev) => prev + 1);\n  };\n\n  const stateHadleTodo = (id: number) => {\n    setTodoState((prev) => {\n      const matchIndex = prev.findIndex((item) => item.id === id);\n      prev[matchIndex].state = (prev[matchIndex].state + 1) % 3;\n      return [...prev];\n    });\n  };\n\n  const removeTodo = (id: number) => {\n    setTodoState((prevState) => prevState.filter((todo: Itodo) => todo.id !== id));\n  };\n\n  const createTodo = (todo: Itodo) => {\n    setTodoState((prevState) =>\n      prevState.concat({\n        ...todo,\n        id: nextIdState,\n      })\n    );\n  };\n\n  const loadData = async() => {\n    let data = localStorage.getItem(`todos_${user}`);\n    if (data === undefined) data = \"\";\n    initialTodos = JSON.parse(data || \"\");\n    if (initialTodos && initialTodos.length >= 1) {\n      const maxId = Math.max(...initialTodos.map((i) => i.id));\n      setNextIdState(maxId + 1);\n    }\n    setTodoState(initialTodos);\n  };\n\n  const saveData = () => {\n    localStorage.setItem(`todos_${user}`, JSON.stringify(todoState));\n  };\n\n  return {\n    todoState,\n    nextIdState,\n    incrementNextId,\n    stateHadleTodo,\n    removeTodo,\n    createTodo,\n  };\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst TodoTemplateBlock = styled.div`\n  width: 70%;\n  height: 800px;\n\n  min-width: 360px;\n  max-width: 700px;\n\n  position: relative;\n  background: white;\n  border-radius: 30px;\n  box-shadow: 0 0 50px 0 rgba(0, 0, 0, 0.1);\n\n  margin: 0 auto;\n\n  margin-top: 96px;\n  margin-bottom: 32px;\n  display: flex;\n  flex-direction: column;\n`;\n\nfunction TodoTemplate(props: any) {\n  return <TodoTemplateBlock>{props.children}</TodoTemplateBlock>;\n}\n\nexport default React.memo(TodoTemplate);\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { LogoutOutlined } from \"@ant-design/icons\";\n\nconst TodoHeadBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 52px;\n  padding-bottom: 24px;\n  border-bottom: 3px solid #33bb77;\n`;\n\nconst UserInfoText = styled.div`\n  font-size: 22px;\n  color: #f48024;\n  padding-top: 5px;\n  padding-right: 10px;\n`;\n\nconst DateText = styled.div`\n  font-size: 26px;\n  color: #119955;\n  padding-left: 10px;\n`;\n\nconst DayText = styled.div`\n  font-size: 22px;\n  color: #119955;\n  padding-top: 5px;\n`;\n\nconst LogoutButton = styled.button`\n  border: none;\n  background: none;\n  font-size: 22px;\n  color: #119955;\n  cursor: pointer;\n  &:hover{\n    color: red;\n  }\n`;\n\ninterface todoHeadProps {\n  user: string;\n  logout: () => void;\n}\n\nconst TodoHead = ({ user, logout }: todoHeadProps) => {\n  const [dayString, setDayString] = useState(\"\");\n  const [dateString, setDateString] = useState(\"\");\n\n  const loadCurrentDate = () => {\n    const currentDate = new Date();\n    const locale = \"en-US\";\n    setDateString(\n      currentDate.toLocaleDateString(locale, {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n      })\n    );\n    setDayString(\n      currentDate.toLocaleDateString(locale, {\n        weekday: \"long\",\n      })\n    );\n  };\n\n  useEffect(() => {\n    loadCurrentDate();\n  }, []);\n\n  return (\n    <TodoHeadBlock>\n      <UserInfoText>{`${user}'s TODO`}</UserInfoText>\n      <DayText>{dayString}</DayText>\n      <DateText>{dateString}</DateText>\n      <LogoutButton onClick={logout} title='Log out'>\n        <LogoutOutlined />\n      </LogoutButton>\n    </TodoHeadBlock>\n  );\n};\n\nexport default React.memo(TodoHead);\n","import { Modal  } from \"antd\";\n\nexport const warningModal = (title: string, content: string) => {\n  Modal.warning({\n    title: title,\n    content: content,\n  });\n};\n\nexport const detailModal = (date: string|null , content: string) => {\n  Modal.info({\n    title: date || 'TODO',\n    content: content\n  })\n}\n\n\n","export const DATE_FORMAT = \"YYYY-MM-DD\";\n\n\nexport const STATE = {\n  TODO: 0,\n  INPROGRESS: 1,\n  DONE: 2,\n};\n","import React from \"react\";\nimport { CheckOutlined, DeleteOutlined, ClockCircleOutlined } from \"@ant-design/icons\";\nimport { Itodo } from \"components/todo/TodoService\";\nimport { detailModal } from 'components/common/Modal';\nimport styled, { css } from \"styled-components\";\nimport { STATE } from \"utils/constants\";\n\nconst Remove = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #119955;\n  font-size: 16px;\n`;\n\nconst TodoItemBlock = styled.div`\n  display: flex;\n  align-items: center;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  &:hover {\n    ${Remove} {\n      display: initial;\n    }\n  }\n`;\n\nconst CheckCircle = styled.div<{ state: number }>`\n  width: 20px;\n  height: 20px;\n  border-radius: 16px;\n  border: 1px solid #33bb77;\n  font-size: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 20px;\n  cursor: pointer;\n\n  ${(props) => {\n    switch (props.state) {\n      case STATE.TODO:\n        return;\n      case STATE.INPROGRESS:\n        return css`\n          border: 1px solid #f48024;\n          color: #f48024;\n        `;\n      case STATE.DONE:\n        return css`\n          border: 1px solid #dddddd;\n          color: #dddddd;\n        `;\n    }\n  }}\n`;\n\nconst textStyleSyncState = (state:number)=>{\n    switch (state) {\n      case STATE.INPROGRESS:\n        return css`\n          color: #f48024;\n          text-decoration: underline;\n        `;\n      case STATE.DONE:\n        return css`\n          color: #ced4da;\n          text-decoration: line-through;\n        `;\n    }\n}\n\nconst Text = styled.div<{ state: number }>`\n  flex: 2;\n  font-size: 16px;\n  white-space:nowrap;\n  color: #119955;\n  overflow:hidden;\n  text-overflow: ellipsis;\n  ${(props) => textStyleSyncState(props.state)}\n`;\n\nconst DateText = styled.div<{ state: number }>`\n  flex: 1;\n  font-size: 16px;\n  color: #119955;\n  ${(props) => textStyleSyncState(props.state)}\n`;\n\ninterface TodoItemProps {\n  toggleTodo: (id: number) => void;\n  removeTodo: (id: number) => void;\n  todo: Itodo;\n}\n\nconst TodoItem = ({ toggleTodo, removeTodo, todo }: TodoItemProps) => {\n  const { text, deadLine, state } = todo;\n\n  const handleState = () => {\n    toggleTodo(todo.id);\n  };\n\n  const handleRemove = () => {\n    removeTodo(todo.id);\n  };\n\n  const renderStateIcon = (id: number) => {\n    switch (id) {\n      case STATE.TODO:\n        return;\n      case STATE.INPROGRESS:\n        return <ClockCircleOutlined />;\n      case STATE.DONE:\n        return <CheckOutlined />;\n    }\n  };\n\n  const checkDetail = () =>{\n    detailModal(deadLine, text);\n  }\n\n  return (\n    <TodoItemBlock>\n      <CheckCircle state={state} onClick={handleState}>\n        {renderStateIcon(state)}\n      </CheckCircle>\n      <Text onClick={checkDetail} state={state}>{text}</Text>\n      {deadLine && <DateText state={state}>{deadLine}</DateText>}\n      <Remove onClick={handleRemove}>\n        <DeleteOutlined />\n      </Remove>\n    </TodoItemBlock>\n  );\n};\n\nexport default React.memo(TodoItem);\n","import { Itodo } from \"components/todo/TodoService\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport TodoItem from \"./item/TodoItem\";\n\nconst TodoListBlock = styled.div`\n  flex: 1;\n  padding: 20px 32px;\n  padding-bottom: 48px;\n  overflow-y: auto;\n`;\n\ninterface TodoListProps {\n  todos: Itodo[];\n  toggleTodo: (id: number) => void;\n  removeTodo: (id: number) => void;\n}\n\nconst TodoList = ({ toggleTodo, removeTodo, todos }: TodoListProps) => {\n  return (\n    <TodoListBlock>\n      {todos &&\n        todos.map((todo) => (\n          <TodoItem\n            toggleTodo={toggleTodo}\n            removeTodo={removeTodo}\n            key={todo.id}\n            todo={todo}\n          />\n        ))}\n    </TodoListBlock>\n  );\n};\n\nexport default React.memo(TodoList);\n","import { DatePicker } from \"antd\";\nimport { Moment } from \"moment\";\nimport { ReactElement } from \"react\";\n\ninterface TodoDatePickerProps {\n  handleDate: (item: Moment | null) => void;\n}\n\nconst TodoDatePicker = ({ handleDate }: TodoDatePickerProps): ReactElement => {\n  const onChange = (date: Moment | null) => {\n    handleDate(date);\n  };\n  return (\n    <div>\n      <DatePicker onChange={onChange} size=\"large\" />\n    </div>\n  );\n};\n\nexport default TodoDatePicker;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport moment, { Moment } from \"moment\";\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\nimport { DATE_FORMAT, STATE } from \"utils/constants\";\nimport { warningModal } from \"components/common/Modal\";\nimport { Itodo } from \"components/todo/TodoService\";\nimport TodoDatePicker from \"./TodoDatePicker\";\n\nconst CircleButton = styled.button<{ open: boolean }>`\n  background: #33bb77;\n  width: 50px;\n  height: 50px;\n  align-items: center;\n  justify-content: center;\n  font-size: 60px;\n  left: 50%;\n  transform: translate(50%, 0%);\n  color: white;\n  border-radius: 50%;\n  border: none;\n  outline: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst InsertFormPositioner = styled.div`\n  width: 100%;\n  border-bottom: 1px solid #eeeeee;\n`;\n\nconst InsertForm = styled.form`\n  display: flex;\n  background: #eeeeee;\n  padding-left: 40px;\n  padding-top: 36px;\n  padding-right: 60px;\n  padding-bottom: 36px;\n`;\n\nconst Input = styled.input`\n  padding: 12px;\n  border: 1px solid #dddddd;\n  width: 100%;\n  outline: none;\n  font-size: 21px;\n  box-sizing: border-box;\n  color: #119955;\n  &::placeholder {\n    color: #dddddd;\n    font-size: 16px;\n  }\n`;\n\ninterface TodoCreateProps {\n  nextId: number;\n  createTodo: (todo: Itodo) => void;\n  incrementNextId: () => void;\n}\n\nconst TodoCreate = ({ nextId, createTodo, incrementNextId }: TodoCreateProps) => {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const [deadLine, setDeadLine] = useState<string | null>(null);\n\n  const handleToggle = () => setOpen(!open);\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => setValue(e.target.value);\n  const handleDate = (date: Moment | null) => {\n    const dateString = date?.format(DATE_FORMAT);\n    if (dateString) setDeadLine(dateString);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault(); // 새로고침 방지\n    if (!value) {\n      warningModal(\"WARN\", \"할일을 입력해주세요\");\n      return;\n    }\n    const curDate = moment().format(DATE_FORMAT);\n\n    if (moment(deadLine).isBefore(curDate)) {\n      warningModal(\"WARN\", \"과거 날짜를 입력하셨습니다.\");\n      return;\n    }\n\n    createTodo({\n      id: nextId,\n      text: value,\n      state: STATE.TODO,\n      deadLine: deadLine,\n    });\n    incrementNextId(); // nextId 하나 증가\n\n    setValue(\"\"); // input 초기화\n    setOpen(false); // open 닫기\n  };\n\n  return (\n    <>\n      <InsertFormPositioner>\n        <InsertForm onSubmit={handleSubmit}>\n          <Input\n            autoFocus\n            placeholder=\"What's need to be done?\"\n            onChange={handleChange}\n            value={value}\n          />\n          <TodoDatePicker handleDate={handleDate} />\n          <CircleButton onClick={handleToggle} open={open}>\n            <PlusCircleOutlined />\n          </CircleButton>\n        </InsertForm>\n      </InsertFormPositioner>\n    </>\n  );\n};\n\nexport default React.memo(TodoCreate);\n","import { Itodo } from \"components/todo/TodoService\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { STATE } from 'utils/constants';\n\nconst TodoFooterBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: 24px;\n  padding-bottom: 24px;\n`;\n\nconst LeftText = styled.div`\n  color: #33bb77;\n  font-size: 18px;\n`;\n\ninterface HooksTodoHeadProps {\n  todos: Itodo[];\n}\n\nconst Todofooter = ({ todos }: HooksTodoHeadProps) => {\n  const undoneTasks = todos.filter((todo) => todo.state!==STATE.DONE);\n  return (\n    <TodoFooterBlock>\n      <LeftText className=\"tasks-left\">\n        {undoneTasks.length} items left\n      </LeftText>\n    </TodoFooterBlock>\n  );\n};\n\nexport default React.memo(Todofooter);\n","import { useTodo } from \"./TodoService\";\nimport TodoTemplate from \"./template/TodoTemplate\";\nimport TodoHead from \"./template/head/TodoHead\";\nimport TodoList from \"./template/list/TodoList\";\nimport TodoCreate from \"./template/create/TodoCreate\";\nimport TodoFooter from \"./template/footer/TodoFooter\";\n\n\ninterface TodoContainerProps {\n  user: string;\n  logout: ()=>void;\n}\n\nconst TodoContainer = ({user, logout}:TodoContainerProps) => {\n  const {\n    todoState,\n    nextIdState,\n    incrementNextId,\n    stateHadleTodo,\n    removeTodo,\n    createTodo,\n  } = useTodo(user);\n  \n  return (\n    <>\n      <TodoTemplate>\n        <TodoHead user={user} logout={logout} />\n        <TodoCreate\n          nextId={nextIdState}\n          createTodo={createTodo}\n          incrementNextId={incrementNextId}\n        />\n        <TodoList\n          toggleTodo={stateHadleTodo}\n          removeTodo={removeTodo}\n          todos={todoState}\n        />\n        <TodoFooter todos={todoState} />\n      </TodoTemplate>\n    </>\n  );\n};\n\nexport default TodoContainer;\n","import { useState, useCallback } from \"react\";\n\nexport function useInput<T>(\n  initialValue: T\n): [T, (e?: React.ChangeEvent<HTMLInputElement>) => void] {\n  const [value, setValue] = useState<T>(initialValue);\n  const handler = useCallback((e) => {\n    setValue(e.target.value);\n  }, []);\n  return [value, handler];\n}\n","import React, { useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { useInput } from \"utils/hooks\";\nimport {  Form, Input, Button } from \"antd\";\n\ninterface LoginFormProps {\n  configUser: (id: string, password: string) => void;\n}\nconst ButtonWrapper = styled.div`\n  margin-top: 20px;\n`;\n\nconst FormWrapper = styled(Form)`\n  padding: 20px;\n`;\n\nconst LoginForm = ({ configUser }: LoginFormProps) => {\n  const [id, onChangeId] = useInput<string>(\"\");\n  const [password, onChangePassword] = useInput<string>(\"\");\n\n  const onSubmitForm = useCallback(() => {\n    configUser(id, password);\n  }, [id, password]);\n\n  return (\n    <FormWrapper onFinish={onSubmitForm}>\n      <div>\n        <label htmlFor='user-id'>아이디</label>\n        <br />\n        <div>\n          <Input name='user-id' value={id} onChange={onChangeId} required />\n        </div>\n      </div>\n      <div>\n        <label htmlFor='user-password'>비밀번호</label>\n        <br />\n        <Input\n          name='user-password'\n          type='password'\n          value={password}\n          onChange={onChangePassword}\n          required\n        />\n      </div>\n      <ButtonWrapper>\n        <Button type='primary' htmlType='submit' loading={false}>\n          로그인\n        </Button>\n      </ButtonWrapper>\n    </FormWrapper>\n  );\n};\n\n\nexport default LoginForm;\n","import React, { useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport TodoContainer from \"./components/todo/TodoContainer\";\nimport LoginForm from \"components/common/LoginForm\";\n\nfunction App() {\n  const [user, setUser] = useState<string>(\"\");\n  const [isLogged, setIsLogged] = useState<boolean>(false);\n\n  const configUser = (id: string, password: string) => {\n    //CONFIG USER APICALL\n    //IF SUCCESS\n    return true;\n    //IF FALSE\n    //return false;\n  };\n\n  const submitLoginForm = (id: string, password: string) => {\n    if (configUser(id, password)) {\n      setUser(id);\n      setIsLogged(true);\n    }\n  };\n\n  const userLogout = () => {\n    setUser(\"\");\n    setIsLogged(false);\n  };\n\n  return (\n    <>\n      {isLogged ? (\n        <TodoContainer user={user} logout={userLogout} />\n      ) : (\n        <LoginForm configUser={submitLoginForm} />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createGlobalStyle } from \"styled-components\";\nimport App from \"./App\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #eeeeee;\n  }\n`;\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}